version: "3"

networks:
    # network for App <-> Redis transactions
    misago-redis-in:
        internal: true
    # network for App <-> DB transactions
    misago-postgres-in:
        internal: true
    # network for App <-> Nginx transactions
    misago-nginx:
        internal: true
    # network for * <-> Celery transactions
    misago-celery:
        internal: true
    # this network faces the outside world
    misago-out:
        internal: false
    # this network is used to connect with elasticsearch instance
    monitor:
        internal: false

services:
    web:
        build: web
        ports:
            - 80:80
        environment:
            - APP_HOST=misago
            - APP_PORT_NUMBER=80
        networks:
            - misago-nginx
            - misago-out
        depends_on:
            - misago

    misago:
        build:
            context: ../..
            dockerfile: deployment/docker/misago/Dockerfile
        ports:
            - ${MISAGO_PORT}:80
        env_file: .env
        networks:
            - misago-redis-in
            - misago-postgres-in
            - misago-celery
            - misago-nginx
        depends_on:
            - postgres
            - proxy

    postgres:
        image: postgres
        restart: unless-stopped
        ports:
            - ${POSTGRES_PORT}:5432
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        networks:
            - misago-postgres-in
            - monitor
        volumes:
            - database-data:/var/lib/postgresql/data/

    metricbeat:
        image: docker.elastic.co/beats/metricbeat:7.1.0
        volumes:
            - ./metricbeat/metricbeat.docker.yml:/usr/share/metricbeat/metricbeat.yml:ro
            #- /var/run/docker.sock:/var/run/docker.sock:ro
            #- /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
            #- /proc:/hostfs/proc:ro
            #- /:/hostfs:ro
        networks:
            - monitor
        depends_on:
            - postgres

    redis-master:
        build: redis/redis
        environment:
            - REDIS_REPLICATION_MODE=master
            - REDIS_PASSWORD=${REDIS_PASSWORD}
        ports:
            - 8010:6379


    redis-slave-1:
        build: redis/redis
        environment:
            - REDIS_REPLICATION_MODE=slave
            - REDIS_MASTER_HOST=${REDIS_MASTER_HOST}
            - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
        ports:
            - 8011:6379
        depends_on:
            - redis-master

    redis-slave-2:
        build: redis/redis
        environment:
            - REDIS_REPLICATION_MODE=slave
            - REDIS_MASTER_HOST=${REDIS_MASTER_HOST}
            - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
        ports:
            - 8012:6379
        depends_on:
            - redis-master

    redis-sentinel:
        image: 'bitnami/redis-sentinel:latest'
        environment:
            - REDIS_MASTER_PASSWORD=${REDIS_PASSWORD}
            - REDIS_MASTER_HOST=${REDIS_MASTER_HOST}
            - MASTER=redis-master
            - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=${REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS}
            - REDIS_SENTINEL_FAILOVER_TIMEOUT=${REDIS_SENTINEL_FAILOVER_TIMEOUT}
            - REDIS_SENTINEL_QUORUM=${REDIS_SENTINEL_QUORUM}
        depends_on:
            - redis-master
            - redis-slave-1
            - redis-slave-2
        ports:
            - ${SENTINEL_PORT}:26379
    
    proxy:
        build: redis/haproxy
        depends_on:
            - redis-slave-1
            - redis-slave-2
            - redis-master
            - redis-sentinel
        ports:
            - '9000:9000'
            - ${REDIS_PORT}:6379
        environment:
            - ADMIN_USERNAME=${ADMIN_USERNAME}
            - ADMIN_PASSWORD=${ADMIN_PASSWORD}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_HOSTS=redis-master, redis-slave-1, redis-slave-2

    celery:
        build:
            context: ../..
            dockerfile: ./deployment/docker/celery/Dockerfile
        command: /bin/bash -c "cd /opt/misago && celery -A devproject worker --loglevel=info"
        env_file: .env
        networks:
            - misago-redis-in
            - misago-postgres-in
            - misago-celery
        depends_on:
            - misago
            - postgres
            - proxy

volumes:
    database-data:
